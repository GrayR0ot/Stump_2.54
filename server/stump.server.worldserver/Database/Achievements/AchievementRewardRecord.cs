using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Achievements;

namespace Stump.Server.WorldServer.Database.Achievements
{
    [D2OClass("AchievementReward", "com.ankamagames.dofus.datacenter.quest")]
    [TableName("achievements_rewards")]
    public class AchievementRewardRecord : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
    {
        private AchievementTemplate m_achievement;
        private uint[] m_emotesReward;
        private string m_emotesRewardCSV;
        private uint[] m_itemsQuantityReward;

        private string m_itemsQuantityRewardCSV;

        // FIELDS
        private uint[] m_itemsReward;
        private string m_itemsRewardCSV;
        private uint[] m_ornamentsReward;
        private string m_ornamentsRewardCSV;
        private uint[] m_spellsReward;
        private string m_spellsRewardCSV;
        private uint[] m_titlesReward;
        private string m_titlesRewardCSV;

        // PROPERTIES
        [PrimaryKey("Id", false)] public uint Id { get; set; }

        public uint AchievementId { get; set; }

        [Ignore]
        public AchievementTemplate Achievement
        {
            get
            {
                if (m_achievement == null)
                    m_achievement = Singleton<AchievementManager>.Instance.TryGetAchievement(AchievementId);

                return m_achievement;
            }
        }

        public int LevelMin { get; set; }

        public int LevelMax { get; set; }

        [Ignore]
        public uint[] ItemsReward
        {
            get => m_itemsReward;
            set
            {
                m_itemsReward = value;
                m_itemsRewardCSV = value.ToCSV(",");
            }
        }

        public string ItemsRewardCSV
        {
            get => m_itemsRewardCSV;
            set
            {
                m_itemsRewardCSV = value;
                m_itemsReward = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] ItemsQuantityReward
        {
            get => m_itemsQuantityReward;
            set
            {
                m_itemsQuantityReward = value;
                m_itemsQuantityRewardCSV = value.ToCSV(",");
            }
        }

        public string ItemsQuantityRewardCSV
        {
            get => m_itemsQuantityRewardCSV;
            set
            {
                m_itemsQuantityRewardCSV = value;
                m_itemsQuantityReward = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] EmotesReward
        {
            get => m_emotesReward;
            set
            {
                m_emotesReward = value;
                m_emotesRewardCSV = value.ToCSV(",");
            }
        }

        public string EmotesRewardCSV
        {
            get => m_emotesRewardCSV;
            set
            {
                m_emotesRewardCSV = value;
                m_emotesReward = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] SpellsReward
        {
            get => m_spellsReward;
            set
            {
                m_spellsReward = value;
                m_spellsRewardCSV = value.ToCSV(",");
            }
        }

        public string SpellsRewardCSV
        {
            get => m_spellsRewardCSV;
            set
            {
                m_spellsRewardCSV = value;
                m_spellsReward = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] TitlesReward
        {
            get => m_titlesReward;
            set
            {
                m_titlesReward = value;
                m_titlesRewardCSV = value.ToCSV(",");
            }
        }

        public string TitlesRewardCSV
        {
            get => m_titlesRewardCSV;
            set
            {
                m_titlesRewardCSV = value;
                m_titlesReward = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] OrnamentsReward
        {
            get => m_ornamentsReward;
            set
            {
                m_ornamentsReward = value;
                m_ornamentsRewardCSV = value.ToCSV(",");
            }
        }

        public string OrnamentsRewardCSV
        {
            get => m_ornamentsRewardCSV;
            set
            {
                m_ornamentsRewardCSV = value;
                m_ornamentsReward = value.FromCSV<uint>(",");
            }
        }

        public virtual void AssignFields(object d2oObject)
        {
            var item = (AchievementReward) d2oObject;
            Id = item.id;
            AchievementId = item.achievementId;
            ItemsReward = item.itemsReward.ToArray();
            ItemsQuantityReward = item.itemsQuantityReward.ToArray();
            EmotesReward = item.emotesReward.ToArray();
            SpellsReward = item.spellsReward.ToArray();
            TitlesReward = item.titlesReward.ToArray();
            OrnamentsReward = item.ornamentsReward.ToArray();
        }

        // CONSTRUCTORS

        // METHODS
        public void BeforeSave(bool insert)
        {
        }
    }
}