using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Achievements;

namespace Stump.Server.WorldServer.Database.Achievements
{
    [D2OClass("AchievementCategory", "com.ankamagames.dofus.datacenter.quest")]
    [TableName("achievements_categories")]
    public class AchievementCategoryRecord : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
    {
        private AchievementTemplate[] m_achievements;

        // FIELDS
        private uint[] m_achievementsIds;
        private string m_achievementsIdsCSV;
        private AchievementCategoryRecord m_parent;

        // PROPERTIES
        [PrimaryKey("Id", false)] public uint Id { get; set; }

        public uint NameId { get; set; }

        public uint ParentId { get; set; }

        [Ignore]
        public AchievementCategoryRecord Parent
        {
            get
            {
                if (ParentId > 0)
                    if (m_parent == null)
                        m_parent = Singleton<AchievementManager>.Instance.TryGetAchievementCategory(ParentId);

                return m_parent;
            }
        }

        [NullString] public string Icon { get; set; }

        public uint Order { get; set; }

        [NullString] public string Color { get; set; }

        [Ignore]
        public uint[] AchievementsIds
        {
            get => m_achievementsIds;
            set
            {
                m_achievementsIds = value;
                m_achievementsIdsCSV = value.ToCSV(",");
            }
        }

        [Ignore]
        public AchievementTemplate[] Achievements
        {
            get
            {
                if (m_achievements == null)
                {
                    m_achievements = new AchievementTemplate[m_achievementsIds.Length];
                    for (var i = 0; i < m_achievementsIds.Length; i++)
                        m_achievements[i] =
                            Singleton<AchievementManager>.Instance.TryGetAchievement(m_achievementsIds[i]);
                }

                return m_achievements;
            }
        }

        public string AchievementsIdsCSV
        {
            get => m_achievementsIdsCSV;
            set
            {
                m_achievementsIdsCSV = value;
                m_achievementsIds = value.FromCSV<uint>(",");
            }
        }

        public virtual void AssignFields(object d2oObject)
        {
            var item = (AchievementCategory) d2oObject;
            Id = item.id;
            NameId = item.nameId;
            ParentId = item.parentId;
            Icon = item.icon;
            Order = item.order;
            Color = item.color;
            AchievementsIds = item.achievementIds.ToArray();
        }

        // CONSTRUCTORS

        // METHODS
        public void BeforeSave(bool insert)
        {
        }
    }
}