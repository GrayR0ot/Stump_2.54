using System.Collections.Generic;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Maps;
using Stump.Server.WorldServer.Game.Maps.Cells;

namespace Stump.Server.WorldServer.Database.Monsters
{
    public class NewMonsterDungeonSpawnRelator
    {
        public static string FetchQuery = "SELECT * FROM monsters_spawns_dungeons " +
                                          "LEFT JOIN monsters_spawns_dungeons_groups_v2 ON monsters_spawns_dungeons_groups_v2.DungeonSpawnId = monsters_spawns_dungeons.Id " +
                                          "LEFT JOIN monsters_templates ON monsters_templates.Id = monsters_spawns_dungeons_groups_v2.MonsterTemplateId";

        public static string FetchNtm = "SELECT * FROM monsters_spawns_dungeons_groups_v2";

        private NewMonsterDungeonSpawn m_current;

        public NewMonsterDungeonSpawn Map(NewMonsterDungeonSpawn spawn, NewMonsterDungeonSpawnEntity entity, MonsterTemplate template)
        {
            if (spawn == null)
                return m_current;

            if (m_current != null && m_current.Id == spawn.Id)
            {
                entity.MonsterTemplate = template;
                m_current.GroupMonsters.Add(entity);
                return null;
            }

            var previous = m_current;

            m_current = spawn;
            entity.MonsterTemplate = template;
            m_current.GroupMonsters.Add(entity);

            return previous;
        }
    }


    /// <summary>
    ///     Only used for many to many relation
    /// </summary>
    [TableName("monsters_spawns_dungeons_groups_v2")]
    public class NewMonsterDungeonSpawnEntity : IAutoGeneratedRecord
    {
        private MonsterTemplate m_monsterTemplate;

        public NewMonsterDungeonSpawnEntity()
        {
        }

        public NewMonsterDungeonSpawnEntity(NewMonsterDungeonSpawn group, MonsterTemplate template, int? minPartyMembers = null)
        {
            DungeonSpawnId = group.Id;
            MonsterTemplate = template;
            MinPartyMembers = minPartyMembers;
        }

        [PrimaryKey("Id")] public int Id { get; set; }

        [Index] public int DungeonSpawnId { get; set; }

        public int MonsterTemplateId { get; set; }

        public int PossibleMonsterTemplateIdsCSV { get; set; }

        public string Informations { get; set; }

        public int? MinPartyMembers { get; set; }

        [Ignore]
        public MonsterTemplate MonsterTemplate
        {
            get => m_monsterTemplate;
            set
            {
                m_monsterTemplate = value;
                MonsterTemplateId = value.Id;
            }
        }
    }

    [TableName("monsters_spawns_dungeons")]
    public class NewMonsterDungeonSpawn : IAutoGeneratedRecord
    {
        private Map m_map;
        private Map m_teleportMap;

        public NewMonsterDungeonSpawn()
        {
            GroupMonsters = new List<NewMonsterDungeonSpawnEntity>();
        }

        [PrimaryKey("Id")] public int Id { get; set; }

        public int MapId { get; set; }

        [Ignore]
        public Map Map
        {
            get => m_map ?? (m_map = Game.World.Instance.GetMap(MapId));
            set
            {
                m_map = value;
                MapId = value.Id;
            }
        }

        public int? CellId { get; set; }

        [Ignore] public List<NewMonsterDungeonSpawnEntity> GroupMonsters { get; set; }

        public bool TeleportEvent { get; set; }

        public int TeleportMapId { get; set; }

        [Ignore]
        public Map TeleportMap
        {
            get => m_teleportMap ?? (m_teleportMap = Game.World.Instance.GetMap(TeleportMapId));
            set
            {
                m_teleportMap = value;
                TeleportMapId = value.Id;
            }
        }

        public short TeleportCell { get; set; }

        public DirectionsEnum TeleportDirection { get; set; }

        public ObjectPosition GetTeleportPosition()
        {
            return !TeleportEvent ? null : new ObjectPosition(TeleportMap, TeleportCell, TeleportDirection);
        }
    }

    public class NewMonsterDungeonWaveSpawnRelator
    {
        public static string FetchQuery = "SELECT * FROM monsters_spawns_dungeons_waves_v2";
    }


    /// <summary>
    ///     Only used for many to many relation
    /// </summary>
    [TableName("monsters_spawns_dungeons_waves_v2")]
    public class NewMonsterDungeonWaveSpawnEntity : IAutoGeneratedRecord
    {
        private MonsterTemplate m_monsterTemplate;

        public NewMonsterDungeonWaveSpawnEntity()
        {
        }

        public NewMonsterDungeonWaveSpawnEntity(NewMonsterDungeonSpawn group, MonsterTemplate template, int? waveNumber,
            int? minPLayer = null)
        {
            DungeonSpawnId = group.Id;
            MonsterTemplate = template;
            WaveNumber = waveNumber;
            MinPlayerLevel = minPLayer;
        }

        [PrimaryKey("Id")] public int Id { get; set; }

        [Index] public int DungeonSpawnId { get; set; }

        public int MonsterTemplateId { get; set; }

        public int? WaveNumber { get; set; }

        public int? MinPlayerLevel { get; set; }

        [Ignore]
        public MonsterTemplate MonsterTemplate
        {
            get => m_monsterTemplate;
            set
            {
                m_monsterTemplate = value;
                MonsterTemplateId = value.Id;
            }
        }
    }
}