using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;

namespace Stump.Server.WorldServer.Database.Spells
{
    public class SpellStateRelator
    {
        public static string FetchQuery = "SELECT * FROM spells_states";
    }

    [TableName("spells_states")]
    [D2OClass("SpellState", "com.ankamagames.dofus.datacenter.spells")]
    public sealed class SpellState : IAssignedByD2O, IAutoGeneratedRecord
    {
        private string m_name;

        [PrimaryKey("Id", false)] public int Id { get; set; }

        public uint NameId { get; set; }

        public string Name => m_name ?? (m_name = TextManager.Instance.GetText(NameId));

        public bool PreventsSpellCast { get; set; }

        public bool PreventsFight { get; set; }

        public bool IsSilent { get; set; }

        public bool CantDealDamage { get; set; }

        public bool Invulnerable { get; set; }

        public bool Incurable { get; set; }

        public bool CantBeMoved { get; set; }

        public bool CantBePushed { get; set; }

        public bool CantSwitchPosition { get; set; }

        public bool InvulnerableMelee { get; set; }

        public bool InvulnerableRange { get; set; }

        public string EffectsCSV { get; set; }

        #region IAssignedByD2O Members

        public void AssignFields(object d2oObject)
        {
            var state = (DofusProtocol.D2oClasses.SpellState) d2oObject;
            Id = state.id;
            NameId = state.nameId;
            PreventsSpellCast = state.preventsSpellCast;
            PreventsFight = state.preventsFight;
            IsSilent = state.IsSilent;
            CantDealDamage = state.CantDealDamage;
            Invulnerable = state.Invulnerable;
            Incurable = state.Incurable;
            CantBeMoved = state.CantBeMoved;
            CantBePushed = state.CantBePushed;
            CantSwitchPosition = state.CantSwitchPosition;
            InvulnerableMelee = state.InvulnerableMelee;
            InvulnerableRange = state.InvulnerableRange;
            EffectsCSV = string.Join(",", state.EffectsIds);
        }

        #endregion
    }
}